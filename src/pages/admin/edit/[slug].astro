---
export const prerender = false;
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PostForm from '../../../components/admin/PostForm'; // Removed .tsx extension
import { SITE_TITLE } from '../../../siteConfig';
import fs from 'node:fs/promises';
import path from 'node:path';
import matter from 'gray-matter';
import yaml from 'js-yaml'; // Import js-yaml
import '../../../styles/admin.css'; // Import admin styles
import type { PostSourceData, Quote } from '../../../types/admin'; // Import Quote type
import { getUniqueTagNames } from '../../../utils/tagUtils'; // Import the utility


if (import.meta.env.PROD) {
  return new Response(null, { status: 404, statusText: 'Not Found (Admin Only)' });
}

const { slug } = Astro.params;
let postToEdit: PostSourceData | null = null;
let errorMessage: string | null = null;

if (!slug) {
  errorMessage = "Error: No post slug was provided in the URL.";
  Astro.response.status = 400; // Bad Request
} else {
  const projectRoot = process.cwd();
  const contentDir = path.join(projectRoot, 'src', 'content', 'blog');
  const potentialFilenames = [`${slug}.md`, `${slug}.mdx`];
  let fileFound = false;

  for (const filename of potentialFilenames) {
    const filePath = path.join(contentDir, filename);
    try {
      const fileContentString = await fs.readFile(filePath, 'utf-8');
      const { data: frontmatterData, content: bodyContentString } = matter(fileContentString);

      postToEdit = {
        originalSlug: slug,
        originalFilePath: filePath, // Store full path
        originalExtension: path.extname(filePath),
        ...frontmatterData,
        bodyContent: bodyContentString.trim(),
        // inlineQuotes will be populated below if applicable
      };

      // If it's a bookNote and has a quotesRef, try to load and parse the quotes YAML
      if (postToEdit.postType === 'bookNote' && postToEdit.quotesRef) {
        const quotesFilePath = path.join(projectRoot, 'src', 'content', 'bookQuotes', `${postToEdit.quotesRef}.yaml`);
        try {
          const quotesFileContent = await fs.readFile(quotesFilePath, 'utf-8');
          const parsedQuotesData = yaml.load(quotesFileContent) as { bookSlug?: string, quotes?: any[] };

          if (parsedQuotesData && Array.isArray(parsedQuotesData.quotes)) {
            postToEdit.inlineQuotes = parsedQuotesData.quotes.map((q: any, index: number) => ({
              id: `loaded-${slug}-${index}-${Date.now()}`, // Generate a unique ID for React key
              text: q.text || '',
              quoteAuthor: q.quoteAuthor || '',
              tags: Array.isArray(q.tags) ? q.tags.map(String) : [],
              quoteSource: q.quoteSource || '',
            }));
          } else {
            postToEdit.inlineQuotes = []; // Set to empty if quotes are not in expected format
          }
        } catch (quoteError) {
          console.warn(`Could not load or parse quotes file: ${quotesFilePath}`, quoteError);
          postToEdit.inlineQuotes = []; // Set to empty if file not found or error
        }
      }


      // PostForm's useEffect and formatDateForInput will handle date formatting.
      // No need to pre-format pubDate here.

      fileFound = true;
      break;
    } catch (e) {
      // File not found or error reading
    }
  }

  if (!fileFound) {
    errorMessage = `Error: Post with slug "${slug}" not found in src/content/blog/.`;
    Astro.response.status = 404;
  }
}

// Fetch all unique tag names for suggestions
const allPostTags = await getUniqueTagNames('blog', (data) => data.tags);
const allBookTags = await getUniqueTagNames('blog', (data) => data.bookTags, (entry) => entry.data.postType === 'bookNote');
const allQuoteTags = await getUniqueTagNames('bookQuotes', (data) => data.quotes?.flatMap(q => q.tags || []) || []);

const pageTitleDisplay = postToEdit?.title || slug || "Post";
const pageTitle = `Edit: ${pageTitleDisplay} - ${SITE_TITLE}`;
---

<BaseLayout title={pageTitle} isAdminPage={true}>
  <div class="page-detail-header">
    <h1>{postToEdit?.title ? `${postToEdit.title}` : (slug ? `"${slug}"` : "Unknown")}</h1>
  </div>

  {errorMessage && !postToEdit && (
    <div class="form-feedback-container error-message visible">
      <p>{errorMessage}</p>
      <a href="/admin/manage-posts/" class="button-edit">Back to Manage Posts</a>
    </div>
  )}

  {postToEdit && !errorMessage && (
    <form
      id="editPostForm"
      class="post-form"
      data-form-type="edit"
      data-original-slug={postToEdit.originalSlug}
    >
      {/* Hidden fields are still useful for initial state if JS fails or for non-JS scenarios,
          but adminFormHandler.js will also update them if slug changes. */}
      <input type="hidden" name="originalSlug" value={postToEdit.originalSlug} />
      <input type="hidden" name="originalFilePath" value={postToEdit.originalFilePath} />
      <input type="hidden" name="originalExtension" value={postToEdit.originalExtension} />

      <PostForm
        client:load
        postData={postToEdit}
        formId="editPostForm"
        allPostTags={allPostTags}
        allBookTags={allBookTags}
        allQuoteTags={allQuoteTags}
      />

      <button type="submit" class="button-primary">Update Post</button>
    </form>
  )}

  <div id="formFeedback" class="form-feedback-container">
    <p id="feedbackMessage"></p>
    <a id="viewPostLink" href="#" class="button-edit">View Post</a> {/* style="display:none;" removed, CSS/JS will handle visibility */}
    <a href="/admin/manage-posts/" class="button-edit manage-posts-link">Back to Manage Posts</a> {/* style removed, class added */}
  </div>
  <script src="/scripts/adminFormHandler.js" is:inline></script>
</BaseLayout>
